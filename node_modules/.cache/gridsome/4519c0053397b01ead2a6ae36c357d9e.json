{"remainingRequest":"C:\\Users\\mjenn\\Desktop\\New folder\\zservices-web2\\node_modules\\babel-loader\\lib\\index.js??ref--1-1!C:\\Users\\mjenn\\Desktop\\New folder\\zservices-web2\\node_modules\\gridsome\\app\\entry.sockjs.js","dependencies":[{"path":"C:\\Users\\mjenn\\Desktop\\New folder\\zservices-web2\\node_modules\\gridsome\\app\\entry.sockjs.js","mtime":1678315670702},{"path":"C:\\Users\\mjenn\\Desktop\\New folder\\zservices-web2\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1678315671046},{"path":"C:\\Users\\mjenn\\Desktop\\New folder\\zservices-web2\\node_modules\\babel-loader\\lib\\index.js","mtime":1678315671014}],"contextDependencies":[],"result":["import fetch from './fetch';\nimport router from './router';\nimport SockJS from 'sockjs-client';\nimport { formatError, clearAllResults, setResults } from './graphql/shared';\nconst sock = new SockJS(process.env.SOCKJS_ENDPOINT);\nsock.onmessage = message => {\n  const data = JSON.parse(message.data);\n  switch (data.type) {\n    case 'fetch':\n      fetch(router.currentRoute, {\n        force: true\n      }).then(res => {\n        if (res.errors) {\n          formatError(res.errors[0], router.currentRoute);\n        } else {\n          clearAllResults(router.currentRoute.path);\n          setResults(router.currentRoute.path, res);\n        }\n      }).catch(err => formatError(err, router.currentRoute));\n      break;\n  }\n};",{"version":3,"names":["fetch","router","SockJS","formatError","clearAllResults","setResults","sock","process","env","SOCKJS_ENDPOINT","onmessage","message","data","JSON","parse","type","currentRoute","force","then","res","errors","path","catch","err"],"sources":["C:/Users/mjenn/Desktop/New folder/zservices-web2/node_modules/gridsome/app/entry.sockjs.js"],"sourcesContent":["import fetch from './fetch'\nimport router from './router'\nimport SockJS from 'sockjs-client'\nimport { formatError, clearAllResults, setResults } from './graphql/shared'\n\nconst sock = new SockJS(process.env.SOCKJS_ENDPOINT)\n\nsock.onmessage = message => {\n  const data = JSON.parse(message.data)\n\n  switch (data.type) {\n    case 'fetch':\n      fetch(router.currentRoute, { force: true })\n        .then(res => {\n          if (res.errors) {\n            formatError(res.errors[0], router.currentRoute)\n          } else {\n            clearAllResults(router.currentRoute.path)\n            setResults(router.currentRoute.path, res)\n          }\n        })\n        .catch(err => formatError(err, router.currentRoute))\n\n      break\n  }\n}\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,SAAS;AAC3B,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,MAAM,MAAM,eAAe;AAClC,SAASC,WAAW,EAAEC,eAAe,EAAEC,UAAU,QAAQ,kBAAkB;AAE3E,MAAMC,IAAI,GAAG,IAAIJ,MAAM,CAACK,OAAO,CAACC,GAAG,CAACC,eAAe,CAAC;AAEpDH,IAAI,CAACI,SAAS,GAAGC,OAAO,IAAI;EAC1B,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACH,OAAO,CAACC,IAAI,CAAC;EAErC,QAAQA,IAAI,CAACG,IAAI;IACf,KAAK,OAAO;MACVf,KAAK,CAACC,MAAM,CAACe,YAAY,EAAE;QAAEC,KAAK,EAAE;MAAK,CAAC,CAAC,CACxCC,IAAI,CAACC,GAAG,IAAI;QACX,IAAIA,GAAG,CAACC,MAAM,EAAE;UACdjB,WAAW,CAACgB,GAAG,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEnB,MAAM,CAACe,YAAY,CAAC;QACjD,CAAC,MAAM;UACLZ,eAAe,CAACH,MAAM,CAACe,YAAY,CAACK,IAAI,CAAC;UACzChB,UAAU,CAACJ,MAAM,CAACe,YAAY,CAACK,IAAI,EAAEF,GAAG,CAAC;QAC3C;MACF,CAAC,CAAC,CACDG,KAAK,CAACC,GAAG,IAAIpB,WAAW,CAACoB,GAAG,EAAEtB,MAAM,CAACe,YAAY,CAAC,CAAC;MAEtD;EAAK;AAEX,CAAC"}]}